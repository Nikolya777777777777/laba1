import java.util.HashSet;

public class Lr11Kovb {
    private String[] array;
    private int length;

    public Lr11Kovb(int length) {
        this.length = length;
        this.array = new String[length];
    }

    public int getLength() {
        return length;
    }

    public String getElement(int index) {
        if (index >= 0 && index < length) {
            return array[index];
        } else {
            throw new IndexOutOfBoundsException("Invalid index");
        }
    }

    public void setElement(int index, String value) {
        if (index >= 0 && index < length) {
            array[index] = value;
        } else {
            throw new IndexOutOfBoundsException("Invalid index");
        }
    }

    public void printElement(int index) {
        if (index >= 0 && index < length) {
            System.out.println("Element " + index + ": " + array[index]);
        } else {
            throw new IndexOutOfBoundsException("Invalid index");
        }
    }

    public void printArray() {
        System.out.println("String array:");
        for (int i = 0; i < length; i++) {
            System.out.println("Element " + i + ": " + array[i]);
        }
    }

    public String[] mergeArrays(Lr11Kovb otherArray) {
        int totalLength = this.length + otherArray.getLength();
        String[] mergedArray = new String[totalLength];

        for (int i = 0; i < this.length; i++) {
            mergedArray[i] = this.getElement(i);
        }
        for (int i = 0; i < otherArray.getLength(); i++) {
            mergedArray[this.length + i] = otherArray.getElement(i);
        }

        return mergedArray;
    }

    public String[] mergeArraysIncludingDuplicates(Lr11Kovb otherArray) {
        HashSet<String> mergedSet = new HashSet<>();
        for (int i = 0; i < this.length; i++) {
            mergedSet.add(this.getElement(i));
        }
        for (int i = 0; i < otherArray.getLength(); i++) {
            mergedSet.add(otherArray.getElement(i));
        }

        return mergedSet.toArray(new String[0]);
    }

    public static void main(String[] args) {
        Lr11Kovb array1 = new Lr11Kovb(5);
        array1.setElement(0, "1");
        array1.setElement(1, "2");
        array1.setElement(2, "3");

        Lr11Kovb array2 = new Lr11Kovb(7);
        array2.setElement(0, "1");
        array2.setElement(1, "2");
        array2.setElement(2, "3");

        array1.printArray();
        array2.printArray();

        String[] mergedArray = array1.mergeArrays(array2);
        System.out.println("Merged array:");
        for (String element : mergedArray) {
            System.out.println(element);
        }

        String[] mergedArrayExcludingDuplicates = array1.mergeArraysIncludingDuplicates(array2);
        System.out.println("Merged array excluding duplicates:");
        for (String element : mergedArrayExcludingDuplicates) {
            System.out.println(element);
        }
    }
}

//Завдання тільки для цього класу
/*
Скласти опис класу для визначення одновимірних масивів строк
фіксованої довжини. Передбачити контроль виходу за межі масиву,
можливість звернення до окремих рядків масиву за індексами,
виконання операцій поелементного зчеплення двох масивів з
утворенням но
вого масиву, злиття двох масивів з виключенням
повторюваних елементів, а також виведення на екран елемента масиву
по заданому індексу та виведення всього масиву.
*/
